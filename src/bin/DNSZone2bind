#!/usr/bin/perl
#use strict;
use warnings;

use Net::LDAP;
use DNSZone;
use File::Basename;
use Config::Tiny;
use Getopt::Long;

my $NAME = basename( $0 );
my $VERSION = '1.0-20120807';

my $configFile = '/etc/dnstools.conf';
my $reload = 1;
my $makeZoneFiles = 1;
my $makeMasterConfig = 1;
my $makeSlaveConfig = 1;

my $result = GetOptions( "config|c=s" => \$configFile,
						 "reload!"   => \$reload,
						 "makeZoneFiles|zones!" => \$makeZoneFiles,
						 "makeMasterConfig|master!" => \$makeMasterConfig,
						 "makeSlaveConfig|slave!" => \$makeSlaveConfig
						 ) or die( "options: $!" );


my $config = Config::Tiny->new();
$config = Config::Tiny->read( $configFile ) || {};
    
my $baseDir = $config->{files}{baseDir} || '/var/lib/bind/zones';
my $zoneMapFile = $config->{files}{zoneMapFile} || '/var/lib/bind/dynamic.zones';
my $zoneMapSlaveFile = $config->{files}{zoneMapSlaveFile} || '/var/lib/bind/dynamic.zones.slave';
my $ldapServer = $config->{ldap}{server} || 'localhost:10389';
my $ldapBase = $config->{ldap}{baseDN} || 'ou=dns,ou=hosting,dc=avajadi,dc=net';
my $primary_ip = $config->{bind}{primaryIP} || '176.58.89.218';

my $ldap = Net::LDAP->new( $ldapServer ) or die "$@";

my %zoneConfig = ();
my $mesg = $ldap->bind ;    # anonymous bind for minimum privileges

$mesg = $ldap->search( # perform a search
                       base   => $ldapBase,
                       filter => "(objectClass=DNSZone)"
                     );

my @zoneEntries = $mesg->entries;

foreach my $zoneEntry ( @zoneEntries ) {

	my $records = $ldap->search( # perform a search
						   base   => $zoneEntry->dn,
						   filter => "(objectClass=DNSRecord)"
						 );

	my $zoneNames = $zoneEntry->get_value('name',asref=>1);
	foreach my $zoneName( @{$zoneNames} )
	{
		my $zone = DNSZone->new();
		$zone->initFromLDAP( $zoneName, $zoneEntry, $records->entries );
		
		my $zfn = zoneFileName($baseDir,$zone);
		if( $makeZoneFiles )
		{
			open( ZF, '>', $zfn ) || die("Failed to open zone file $zfn for writing: $!" );
			print ZF ( fileHeader( $zone ) );
			print ZF ( $zone->toString() );
			close( ZF );
		}
		$zoneConfig{$zone->{name}} = $zfn;
	}
}
$ldap->unbind;

writeConfig( $zoneMapFile, $zoneMapSlaveFile, %zoneConfig );
system('rndc','reload') if( $reload );

sub zoneFileName
{
	my @zfn = ( shift, shift()->{name} . '.zone' );
	return join( '/', @zfn );
}

sub fileHeader
{
	my $zone = shift;
	my $now = `date`;
	chomp( $now );
	return <<EOH;
;; Bind9 zone file generated by $NAME $VERSION
;; $now
;; Zone name: $zone->{name}
;; Zone serial: $zone->{serial}

EOH
}

sub writeConfig
{
	my( $masterFileName, $slaveFileName, %zoneMap ) = @_;
	if( $makeMasterConfig ) {
		open( CF, '>', $masterFileName ) || die( "Failed to open file '$masterFileName' for writing: $!" );
		while( my ($zone,$file) = each( %zoneMap ) )
		{
			print CF ( "zone \"$zone\"  { type master; file \"$file\"; };\n" );
		}
		close( CF );
	}
	if( $makeSlaveConfig ) {
		open( SF, '>',$slaveFileName) || die( "Failed to open secondary config file '$slaveFileName' for writing: $!" );
		while( my ($zone,$file) = each( %zoneMap ) )
		{
			print SF <<EOSF;
zone "$zone" in {
    type slave;
    file "$file";
    masters {$primary_ip;};
};
EOSF
		}
		close( SF );
	}
}
